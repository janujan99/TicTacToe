{"ast":null,"code":"var _jsxFileName = \"/Users/janujansritharan/Projects/MyTicTacToe/tictactoe/src/board.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Square.css\";\nimport \"./Board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"square\",\n      onClick: this.props.onClick,\n      children: this.props.char\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n\n  handleClick() {\n    this.props.fn(this.props.num);\n\n    if (!this.state.clicked) {\n      this.setState({\n        clicked: true\n      });\n    }\n  }\n\n}\n\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game_board: [null, null, null, null, null, null, null, null, null],\n      x_turn: true,\n      gameOver: false\n    };\n  }\n\n  checkWin(squareNum, gameBoard) {\n    console.log(gameBoard);\n    let ch = gameBoard[squareNum];\n    let checkDiagonals = squareNum % 2 === 0 ? true : false; // check row of particular square\n\n    let squareRow = Math.floor(squareNum / 3);\n    let possibleRowVals = [squareNum - 2, squareNum - 1, squareNum, squareNum + 1, squareNum + 2];\n    let rowVals = [];\n\n    for (let i = 0; i < possibleRowVals.length; i++) {\n      if (Math.floor(possibleRowVals[i] / 3) === squareRow) {\n        rowVals.push(possibleRowVals[i]);\n      }\n    }\n\n    let rowWin = true;\n\n    for (let i = 0; i < rowVals.length; i++) {\n      if (gameBoard[rowVals[i]] !== ch) {\n        rowWin = false;\n      }\n    }\n\n    if (rowWin) return true; // check column of particular square\n\n    let possibleColVals = [squareNum - 6, squareNum - 3, squareNum, squareNum + 3, squareNum + 6];\n    let colVals = [];\n\n    for (let i = 0; i < possibleColVals.length; i++) {\n      if (possibleColVals[i] >= 0 && possibleColVals[i] < 9) colVals.push(possibleColVals[i]);\n    }\n\n    let colWin = true;\n\n    for (let i = 0; i < colVals.length; i++) {\n      if (gameBoard[colVals[i]] !== ch) {\n        colWin = false;\n      }\n    }\n\n    if (colWin) return true;\n\n    if (checkDiagonals) {\n      let topLeft = gameBoard[0] === ch && gameBoard[4] === ch && gameBoard[8] === ch;\n      let topRight = gameBoard[2] === ch && gameBoard[4] === ch && gameBoard[6] === ch;\n      if (topRight || topLeft) return true;\n    }\n\n    return false;\n  }\n\n  updateBoard(squareNum) {\n    if (this.state.game_board[squareNum] || this.state.gameOver) {\n      return;\n    }\n\n    let game_board = this.state.game_board.slice();\n\n    if (this.state.x_turn) {\n      game_board[squareNum] = \"X\";\n    } else {\n      game_board[squareNum] = \"O\";\n    }\n\n    let gameOver = false;\n\n    if (this.checkWin(squareNum, game_board)) {\n      gameOver = true;\n      alert(\"Game over: Winner is \" + game_board[squareNum]);\n    }\n\n    this.setState({\n      game_board: game_board,\n      x_turn: !this.state.x_turn,\n      gameOver: gameOver\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bigboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          num: 0,\n          char: this.state.game_board[0],\n          onClick: () => this.updateBoard(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 1,\n          char: this.state.game_board[1],\n          onClick: () => this.updateBoard(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 2,\n          char: this.state.game_board[2],\n          onClick: () => this.updateBoard(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          num: 3,\n          char: this.state.game_board[3],\n          onClick: () => this.updateBoard(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 4,\n          char: this.state.game_board[4],\n          onClick: () => this.updateBoard(4)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 5,\n          char: this.state.game_board[5],\n          onClick: () => this.updateBoard(5)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          num: 6,\n          char: this.state.game_board[6],\n          onClick: () => this.updateBoard(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 7,\n          char: this.state.game_board[7],\n          onClick: () => this.updateBoard(7)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          num: 8,\n          char: this.state.game_board[8],\n          onClick: () => this.updateBoard(8)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"newgame\",\n        onClick: () => this.setState({\n          game_board: Array(9).fill(null),\n          x_turn: true,\n          gameOver: false\n        }),\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/janujansritharan/Projects/MyTicTacToe/tictactoe/src/board.js"],"names":["React","ReactDOM","Square","Component","constructor","props","state","clicked","render","onClick","char","handleClick","fn","num","setState","Board","game_board","x_turn","gameOver","checkWin","squareNum","gameBoard","console","log","ch","checkDiagonals","squareRow","Math","floor","possibleRowVals","rowVals","i","length","push","rowWin","possibleColVals","colVals","colWin","topLeft","topRight","updateBoard","slice","alert","Array","fill"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./Square.css\";\nimport \"./Board.css\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clicked: false };\n  }\n  render() {\n    return (\n      <div className=\"square\" onClick={this.props.onClick}>\n        {this.props.char}\n      </div>\n    );\n  }\n  handleClick() {\n    this.props.fn(this.props.num);\n    if (!this.state.clicked) {\n      this.setState({ clicked: true });\n    }\n  }\n}\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game_board: [null, null, null, null, null, null, null, null, null],\n      x_turn: true,\n      gameOver: false,\n    };\n  }\n  checkWin(squareNum, gameBoard) {\n    console.log(gameBoard);\n    let ch = gameBoard[squareNum];\n    let checkDiagonals = squareNum % 2 === 0 ? true : false;\n    // check row of particular square\n    let squareRow = Math.floor(squareNum / 3);\n    let possibleRowVals = [\n      squareNum - 2,\n      squareNum - 1,\n      squareNum,\n      squareNum + 1,\n      squareNum + 2,\n    ];\n    let rowVals = [];\n    for (let i = 0; i < possibleRowVals.length; i++) {\n      if (Math.floor(possibleRowVals[i] / 3) === squareRow) {\n        rowVals.push(possibleRowVals[i]);\n      }\n    }\n    let rowWin = true;\n    for (let i = 0; i < rowVals.length; i++) {\n      if (gameBoard[rowVals[i]] !== ch) {\n        rowWin = false;\n      }\n    }\n    if (rowWin) return true;\n    // check column of particular square\n    let possibleColVals = [\n      squareNum - 6,\n      squareNum - 3,\n      squareNum,\n      squareNum + 3,\n      squareNum + 6,\n    ];\n    let colVals = [];\n    for (let i = 0; i < possibleColVals.length; i++) {\n      if (possibleColVals[i] >= 0 && possibleColVals[i] < 9)\n        colVals.push(possibleColVals[i]);\n    }\n    let colWin = true;\n    for (let i = 0; i < colVals.length; i++) {\n      if (gameBoard[colVals[i]] !== ch) {\n        colWin = false;\n      }\n    }\n    if (colWin) return true;\n\n    if (checkDiagonals) {\n      let topLeft =\n        gameBoard[0] === ch && gameBoard[4] === ch && gameBoard[8] === ch;\n      let topRight =\n        gameBoard[2] === ch && gameBoard[4] === ch && gameBoard[6] === ch;\n      if (topRight || topLeft) return true;\n    }\n    return false;\n  }\n  updateBoard(squareNum) {\n    if (this.state.game_board[squareNum] || this.state.gameOver) {\n      return;\n    }\n    let game_board = this.state.game_board.slice();\n    if (this.state.x_turn) {\n      game_board[squareNum] = \"X\";\n    } else {\n      game_board[squareNum] = \"O\";\n    }\n    let gameOver = false;\n    if (this.checkWin(squareNum, game_board)) {\n      gameOver = true;\n      alert(\"Game over: Winner is \" + game_board[squareNum]);\n    }\n    this.setState({\n      game_board: game_board,\n      x_turn: !this.state.x_turn,\n      gameOver: gameOver,\n    });\n  }\n  render() {\n    return (\n      <div className=\"bigboard\">\n        <div className=\"row\">\n          <Square\n            num={0}\n            char={this.state.game_board[0]}\n            onClick={() => this.updateBoard(0)}\n          />\n          <Square\n            num={1}\n            char={this.state.game_board[1]}\n            onClick={() => this.updateBoard(1)}\n          />\n          <Square\n            num={2}\n            char={this.state.game_board[2]}\n            onClick={() => this.updateBoard(2)}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            num={3}\n            char={this.state.game_board[3]}\n            onClick={() => this.updateBoard(3)}\n          />\n          <Square\n            num={4}\n            char={this.state.game_board[4]}\n            onClick={() => this.updateBoard(4)}\n          />\n          <Square\n            num={5}\n            char={this.state.game_board[5]}\n            onClick={() => this.updateBoard(5)}\n          />\n        </div>\n        <div className=\"row\">\n          <Square\n            num={6}\n            char={this.state.game_board[6]}\n            onClick={() => this.updateBoard(6)}\n          />\n          <Square\n            num={7}\n            char={this.state.game_board[7]}\n            onClick={() => this.updateBoard(7)}\n          />\n          <Square\n            num={8}\n            char={this.state.game_board[8]}\n            onClick={() => this.updateBoard(8)}\n          />\n        </div>\n        <button\n          class=\"newgame\"\n          onClick={() =>\n            this.setState({\n              game_board: Array(9).fill(null),\n              x_turn: true,\n              gameOver: false,\n            })\n          }\n        >\n          New Game\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}